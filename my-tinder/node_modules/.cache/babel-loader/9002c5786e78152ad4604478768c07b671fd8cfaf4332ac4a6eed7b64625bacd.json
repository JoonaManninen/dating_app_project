{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\joona\\\\Desktop\\\\Advanced_project\\\\my-tinder\\\\src\\\\pages\\\\Mainpage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport UserCard from '../components/UserCard';\nimport Menu from '../components/Menu';\nimport { useNavigate } from 'react-router-dom';\nimport './MainPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MainPage = ({\n  jwtToken,\n  user,\n  setJwtToken\n}) => {\n  _s();\n  const [users, setUsers] = useState([]); // Fetch and set user data\n  const [currentUser, setCurrentUser] = useState(null); // Fetch and set current user data\n  const [showPopup, setShowPopup] = useState(false); // State to toggle popup visibility\n  const navigate = useNavigate();\n\n  // Fetch users and current user data on component mount\n  useEffect(() => {\n    // Check if jwtToken exists, if not redirect to login page\n    if (!jwtToken) {\n      navigate('/login');\n      return;\n    }\n    console.log(user);\n    // Fetch user data based on username\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:5000/users?username=${user.username}`, {\n          headers: {\n            Authorization: `Bearer ${jwtToken}`\n          }\n        });\n        if (response.ok) {\n          const userData = await response.json();\n          console.log(userData.name);\n          setCurrentUser(userData);\n        } else {\n          console.error('Failed to fetch user data');\n        }\n      } catch (error) {\n        console.error('Error fetching user data:', error);\n      }\n    };\n    fetchUserData();\n  }, [jwtToken, user.username, navigate]);\n\n  // Function to handle like/dislike actions\n  const handleLikeDislike = (userId, action) => {\n    // Implement like/dislike logic here\n  };\n\n  // Function to handle username click and toggle popup visibility\n  const handleUsernameClick = () => {\n    setShowPopup(!showPopup);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      onClick: handleUsernameClick,\n      children: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup show\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: currentUser.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Bio: \", currentUser.bio]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUsernameClick,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this), users.map(user => /*#__PURE__*/_jsxDEV(UserCard, {\n      user: user,\n      onLike: () => handleLikeDislike(user.id, 'like'),\n      onDislike: () => handleLikeDislike(user.id, 'dislike')\n    }, user.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(Menu, {\n      setJwtToken: setJwtToken\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(MainPage, \"l/QDn46/j2ELbkxhCkvdFgoDSJc=\", false, function () {\n  return [useNavigate];\n});\n_c = MainPage;\nexport default MainPage;\nvar _c;\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["React","useState","useEffect","UserCard","Menu","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","MainPage","jwtToken","user","setJwtToken","_s","users","setUsers","currentUser","setCurrentUser","showPopup","setShowPopup","navigate","console","log","fetchUserData","response","fetch","username","headers","Authorization","ok","userData","json","name","error","handleLikeDislike","userId","action","handleUsernameClick","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","className","bio","map","onLike","id","onDislike","_c","$RefreshReg$"],"sources":["C:/Users/joona/Desktop/Advanced_project/my-tinder/src/pages/Mainpage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport UserCard from '../components/UserCard';\r\nimport Menu from '../components/Menu';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './MainPage.css'\r\n\r\nconst MainPage = ({ jwtToken, user, setJwtToken }) => {\r\n  const [users, setUsers] = useState([]); // Fetch and set user data\r\n  const [currentUser, setCurrentUser] = useState(null); // Fetch and set current user data\r\n  const [showPopup, setShowPopup] = useState(false); // State to toggle popup visibility\r\n  const navigate = useNavigate();\r\n\r\n  // Fetch users and current user data on component mount\r\n  useEffect(() => {\r\n    // Check if jwtToken exists, if not redirect to login page\r\n    if (!jwtToken) {\r\n      navigate('/login');\r\n      return;\r\n    }\r\n    console.log(user)\r\n    // Fetch user data based on username\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:5000/users?username=${user.username}`, {\r\n          headers: {\r\n            Authorization: `Bearer ${jwtToken}`,\r\n          },\r\n        });\r\n        if (response.ok) {\r\n          const userData = await response.json();\r\n          console.log(userData.name);\r\n          setCurrentUser(userData);\r\n        } else {\r\n          console.error('Failed to fetch user data');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching user data:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserData();\r\n  }, [jwtToken, user.username, navigate]);\r\n\r\n  // Function to handle like/dislike actions\r\n  const handleLikeDislike = (userId, action) => {\r\n    // Implement like/dislike logic here\r\n  };\r\n\r\n  // Function to handle username click and toggle popup visibility\r\n  const handleUsernameClick = () => {\r\n    setShowPopup(!showPopup);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1 onClick={handleUsernameClick}>{user.username}</h1>\r\n      {showPopup && (\r\n        <div className=\"popup show\">\r\n          <h2>{currentUser.name}</h2>\r\n          <p>Bio: {currentUser.bio}</p>\r\n          <button onClick={handleUsernameClick}>Close</button>\r\n        </div>\r\n      )}\r\n      {users.map((user) => (\r\n        <UserCard\r\n          key={user.id}\r\n          user={user}\r\n          onLike={() => handleLikeDislike(user.id, 'like')}\r\n          onDislike={() => handleLikeDislike(user.id, 'dislike')}\r\n        />\r\n      ))}\r\n      <Menu setJwtToken={ setJwtToken }/>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}